import &ArtStandardLib, &TeslaLib, &teslajs

authWithIdInvoke = (method) ->
  (options) -> authAndGetVehicleId(options).then method

options =
  username:  "" your tesla username - used just long enough to fetch an API key and then discarded; alternatively, you can set your password as an environment variable: tesla_username
  password:  "" your tesla password - used just long enough to fetch an API key and then discarded; alternatively, you can set your password as an environment variable: tesla_password

require("@art-suite/cli").start
  description:
    """
      A remote for your Tesla, how cool is that?

      Based on this NPM package: https://www.npmjs.com/package/teslajs
      Based on the unofficial Tesla API documention: https://tesla-api.timdorr.com

      NOTE: usernames and passwords are never stored, they are used to fetch a one-time API token which is discared when the command completes.

  commands: merge
    vehicles: {}
      options
      description: "" Get information about all your Tesla vehicles.
      run: (options) ->
        auth options
        .then vehiclesAsync

    products: {}
      options
      description: "" Get information about all your Tesla products.
      run: (options) ->
        auth options
        .then productsAsync

    openFrunk: {}
      options
      description: "" Open the frunk.
      run: authWithIdInvoke (creds) -> openTrunk creds, FRUNK

    openTrunk: {}
      options
      description: "" Open the trunk. If powered, will also close the trunk.
      run: authWithIdInvoke (creds) -> openTrunk creds, TRUNK

    object methodName in compactFlatten []
        :chargeState :vehicleData :guiSettings :driveState :vehicleConfig :nearbyChargers :mobileEnabled :climateState
      {}
        options
        description: "" Get #{dashCase methodName} (read-only action}
        run: authWithIdInvoke &teslajs[methodName + :Async]

    object methodName in compactFlatten []
        :wakeUp
        :flashLights
        :doorLock
        :doorUnlock
        :stopCharge
        :startCharge
        :openChargePort
        :closeChargePort
        :climateStart
        :climateStop
      {}
        options
        description: "" #{dashCase methodName} the car (write action)
        run: authWithIdInvoke &teslajs[methodName + :Async]
