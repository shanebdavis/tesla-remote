import &ArtStandardLib

getTeslaEnvVars = ->
  object v, k in process.env when /^tesla/i.test k with-key lowerCamelCase k.replace /^tesla[-_]?/, ''

{}
  auth = (credentials) ->
    credentials = merge getTeslaEnvVars(), credentials
    credentials extract username, password, mfaPassCode, authToken
    Promise.then ->
      if present(username) and present password
        log "" Tesla auth: using username and password #{"with mfaPassCode" if present mfaPassCode}
        &teslajs.loginAsync credentials
      else if present authToken
        log "" Tesla auth: using authToken
        {} authToken
      else error: "" Required: authToken or username and password

    .then (result) ->
      if result.error
        throw result.error

      unless result?.authToken
        throw formattedInspect
          message: "" log in failed to return token. username: #{username}
          result

      {authToken, refreshToken} = result

  authAndGetVehicleId = (options) ->
    auth options
    .then (creds) ->
      Promise.then ->
        options.product_id
        ? process.env.tesla_product_id
        ? &teslajs.vehiclesAsync(creds).then ([{id_s}]) -> id_s
      .then (vehicleID) -> merge creds, {} vehicleID
